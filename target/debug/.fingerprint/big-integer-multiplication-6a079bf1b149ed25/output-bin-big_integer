{"message":"`main` function not found in crate `big_integer`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/bin/big_integer.rs","byte_start":0,"byte_end":1779,"line_start":1,"line_end":73,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"const CAPACITY: usize = 1_000_000_000; ","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Clone, Debug)]","highlight_start":1,"highlight_end":24},{"text":"pub struct BigInteger {","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub start: usize,","highlight_start":1,"highlight_end":22},{"text":"    pub len: usize,","highlight_start":1,"highlight_end":20},{"text":"    pub nums: Vec::<i32>,","highlight_start":1,"highlight_end":26},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl BigInteger {","highlight_start":1,"highlight_end":18},{"text":"    pub fn new() -> BigInteger {","highlight_start":1,"highlight_end":33},{"text":"        BigInteger {","highlight_start":1,"highlight_end":21},{"text":"            start: 0,","highlight_start":1,"highlight_end":22},{"text":"            len: 0,","highlight_start":1,"highlight_end":20},{"text":"            nums: vec![0; CAPACITY]","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    //pub fn init(len: usize) -> BigInteger {","highlight_start":1,"highlight_end":46},{"text":"    //    ","highlight_start":1,"highlight_end":11},{"text":"    //}","highlight_start":1,"highlight_end":8},{"text":"    pub fn from(s: &str) -> BigInteger {","highlight_start":1,"highlight_end":41},{"text":"        let mut bi = BigInteger::new();","highlight_start":1,"highlight_end":40},{"text":"        bi.len =  s.len();","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for (i, c) in s.chars().rev().enumerate() {","highlight_start":1,"highlight_end":52},{"text":"            bi.nums[i] = c.to_digit(10).unwrap() as i32;","highlight_start":1,"highlight_end":57},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        bi","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    pub fn is_empty(&self) -> bool {","highlight_start":1,"highlight_end":37},{"text":"        self.len == 0","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    pub fn to_string(&self) -> String {","highlight_start":1,"highlight_end":40},{"text":"        self.nums.get(self.start..self.start+self.len).unwrap()","highlight_start":1,"highlight_end":64},{"text":"            .iter().rev()","highlight_start":1,"highlight_end":26},{"text":"            .map(|i| i.to_string()).collect::<String>()","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    pub fn mult (&self, other: &BigInteger) -> BigInteger {","highlight_start":1,"highlight_end":60},{"text":"        let mut bi = BigInteger::new();","highlight_start":1,"highlight_end":40},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        bi.start = self.start + other.start;","highlight_start":1,"highlight_end":45},{"text":"        bi.len = self.len + other.len;","highlight_start":1,"highlight_end":39},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        for i in self.start..self.start+self.len {","highlight_start":1,"highlight_end":51},{"text":"            for j in other.start..other.start+other.len {","highlight_start":1,"highlight_end":58},{"text":"                let mul = self.nums[i] * other.nums[j];","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let curr = i + j;","highlight_start":1,"highlight_end":34},{"text":"                let high = i + j + 1;","highlight_start":1,"highlight_end":38},{"text":"                let total = mul + bi.nums[curr];","highlight_start":1,"highlight_end":49},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                bi.nums[high] += total / 10;","highlight_start":1,"highlight_end":45},{"text":"                bi.nums[curr] = total % 10;","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        while bi.len > 1 && bi.nums[bi.start+bi.len-1] == 0 {","highlight_start":1,"highlight_end":62},{"text":"            bi.len -= 1;","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        bi","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"use std::fmt;","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl fmt::Display for BigInteger {","highlight_start":1,"highlight_end":35},{"text":"    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {","highlight_start":1,"highlight_end":63},{"text":"        write!(f, \"{}\", self.to_string())","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/bin/big_integer.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `big_integer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/big_integer.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst CAPACITY: usize = 1_000_000_000; \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BigInteger {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/bin/big_integer.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
